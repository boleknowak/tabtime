generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  id         String   @id @default(cuid())
  hostname   String
  faviconUrl String?  @map("favicon_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([hostname, id])
  @@map("sites")
}

model Visit {
  id         String    @id @default(cuid())
  tokenId    String    @map("token_id")
  origin     String
  path       String
  os         String    @default("unknown")
  browser    String    @default("unknown")
  seconds    Int       @default(0)
  lastPingAt DateTime? @map("last_ping_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  token Token @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([id, tokenId, createdAt, lastPingAt, origin])
  @@map("visits")
}

model Token {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String?
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  visits Visit[]

  @@index([userId, token])
  @@map("tokens")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  maxTokens     Int       @default(2)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt

  accounts Account[]
  sessions Session[]
  tokens   Token[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
